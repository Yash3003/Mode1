/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2019-09-04 12:42:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.hcl.hib.Subjects;
import org.hibernate.Transaction;
import org.hibernate.Query;
import org.hibernate.Session;
import com.hcl.hib.HibernateUtil;
import org.hibernate.SessionFactory;

public final class Subjects_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.hcl.hib.Subjects");
    _jspx_imports_classes.add("org.hibernate.Transaction");
    _jspx_imports_classes.add("com.hcl.hib.HibernateUtil");
    _jspx_imports_classes.add("org.hibernate.SessionFactory");
    _jspx_imports_classes.add("org.hibernate.Query");
    _jspx_imports_classes.add("org.hibernate.Session");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(" \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<script>\r\n");
      out.write("\tfunction change(val) {\r\n");
      out.write("\tvar element = document.getElementById('theory');\r\n");
      out.write("\tvar element1 = document.getElementById('practical');\r\n");
      out.write("\t\tif (val == \"C/C++\") {\r\n");
      out.write("\t\t\telement.value = \"30\";\r\n");
      out.write("\t\t\telement1.value = \"40\"\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (val == \"Java\") {\r\n");
      out.write("\t\t\telement.value = \"25\";\r\n");
      out.write("\t\t\telement1.value = \"20\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (val == \"Python\") {\r\n");
      out.write("\t\t\telement.value = \"45\";\r\n");
      out.write("\t\t\telement1.value = \"36\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (val == \"Oracle\") {\r\n");
      out.write("\t\t\telement.value = \"55\";\r\n");
      out.write("\t\t\telement1.value = \"48\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (val == \"DataStructures\") {\r\n");
      out.write("\t\t\telement.value = \"10\";\r\n");
      out.write("\t\t\telement1.value = \"15\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (val == \"DataBase\") {\r\n");
      out.write("\t\t\telement.value = \"100\";\r\n");
      out.write("\t\t\telement1.value = \"150\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<form method = \"get\" action = \"Subjects.jsp\" >\r\n");
      out.write("\t\t<center>\r\n");
      out.write("\t\t\tSubject :\r\n");
      out.write("\t\t\t<select name = \"subject\" onchange=\"change(this.value)\">\r\n");
      out.write("\t\t\t\t<option>Select One Option</option>\r\n");
      out.write("\t\t\t\t<option value = \"C/C++\">C/C++</option>\r\n");
      out.write("\t\t\t\t<option value = \"Java\">Java</option>\r\n");
      out.write("\t\t\t\t<option value = \"Python\">Python</option>\r\n");
      out.write("\t\t\t\t<option value = \"Oracle\">Oracle</option>\r\n");
      out.write("\t\t\t\t<option value = \"DataStructures\">Data Structures</option>\r\n");
      out.write("\t\t\t\t<option value = \"DataBase\">Data base</option> \r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t</select><br/><br/>\r\n");
      out.write("\t\t\tTheory :\r\n");
      out.write("\t\t\t<input type = \"text\" name = \"theory\" id = \"theory\" readonly=\"readonly\" /><br/><br/>\r\n");
      out.write("\t\t\tPractical :\r\n");
      out.write("\t\t\t<input type = \"text\" name = \"practical\" id = \"practical\" readonly=\"readonly\" /><br/><br/>\r\n");
      out.write("\t\t\tYear :\r\n");
      out.write("\t\t\t<input type = \"number\" name = \"year\" /><br/><br/>\r\n");
      out.write("\t\t\tInstructor :\r\n");
      out.write("\t\t\t<input type = \"text\" name = \"instructor\" /><br/><br/>\r\n");
      out.write("\t\t\t<input type = \"submit\" value = \"Insert\" /> \r\n");
      out.write("\t\t</center>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t");

		if (request.getParameter("subject") != null && request.getParameter("year") != null && request.getParameter("instructor") != null) {
			SessionFactory sf = HibernateUtil.getConnection();
			Session s = sf.openSession();
			Subjects obj = new Subjects();
			obj.setSubject(request.getParameter("subject"));
			obj.setTheory(Integer.parseInt(request.getParameter("theory")));
			obj.setPractical(Integer.parseInt(request.getParameter("practical")));
			obj.setYear(Integer.parseInt(request.getParameter("year")));
			obj.setInstructor(request.getParameter("instructor"));
			Transaction t = s.beginTransaction();
			s.save(obj);
			t.commit();
			out.println("Record Inserted....");
		}
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
